-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from Grammar.y
-----------------------------------------------------------------------------


rule 6 is unused
rule 7 is unused
rule 8 is unused
rule 9 is unused
rule 10 is unused
rule 11 is unused
rule 12 is unused
rule 13 is unused
rule 14 is unused
rule 15 is unused
rule 16 is unused
rule 17 is unused
rule 18 is unused
rule 19 is unused
rule 20 is unused
rule 21 is unused
rule 22 is unused
rule 23 is unused
rule 24 is unused
rule 25 is unused
rule 26 is unused

terminal type is unused
terminal if is unused
terminal then is unused
terminal else is unused
terminal while is unused
terminal do is unused
terminal assign is unused
terminal pipe is unused
terminal colon is unused
terminal arrow is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> List                           (0)
	List -> Expr comma ListHelper                      (1)
	ListHelper -> Expr comma ListHelper                (2)
	ListHelper -> Expr                                 (3)
	Args -> Expr comma Args                            (4)
	Args -> Expr                                       (5)
	Btype -> symbol                                    (6)
	Xtype -> Btype pipe Xtype                          (7)
	Xtype -> Btype                                     (8)
	Ttype1 -> Xtype comma Ttype1                       (9)
	Ttype1 -> Xtype comma Xtype                        (10)
	Ttype -> lparen Ttype1 rparen                      (11)
	Ptype -> Ttype                                     (12)
	Ptype -> Xtype                                     (13)
	Ftype -> Ptype arrow Ptype                         (14)
	Type -> Ptype                                      (15)
	Type -> Ftype                                      (16)
	Signature -> symbol colon Type                     (17)
	Equation -> symbol lparen Args rparen eq Expr      (18)
	Equations -> Equation Equations                    (19)
	Equations -> Equation                              (20)
	Stmts -> Stmt Stmts                                (21)
	Stmts ->                                           (22)
	Stmt -> if Expr then Expr else Expr                (23)
	Stmt -> while Expr do Expr                         (24)
	Stmt -> Signature Equations                        (25)
	Stmt -> type symbol assign Expr                    (26)
	Expr -> int                                        (27)
	Expr -> symbol                                     (28)
	Expr -> lparen Expr rparen                         (29)
	Expr -> lparen List rparen                         (30)
	Expr -> symbol lparen Args rparen                  (31)
	Expr -> Expr plus Expr                             (32)
	Expr -> Expr minus Expr                            (33)
	Expr -> Expr times Expr                            (34)
	Expr -> Expr div Expr                              (35)
	Expr -> Expr eq Expr                               (36)
	Expr -> Expr gt Expr                               (37)
	Expr -> Expr lt Expr                               (38)
	Expr -> Expr lte Expr                              (39)
	Expr -> Expr gte Expr                              (40)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	type           { TokenType }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	while          { TokenWhile }
	do             { TokenDo }
	int            { TokenInt $$ }
	assign         { TokenAssign }
	plus           { TokenPlus }
	minus          { TokenMinus }
	times          { TokenTimes }
	div            { TokenDiv }
	lparen         { TokenLParen }
	rparen         { TokenRParen }
	pipe           { TokenPipe }
	colon          { TokenColon }
	arrow          { TokenArrow }
	comma          { TokenComa }
	eq             { TokenEQ }
	gt             { TokenGT }
	lt             { TokenLT }
	lte            { TokenLTE }
	gte            { TokenGTE }
	symbol         { TokenSym $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	List            rule  1
	ListHelper      rules 2, 3
	Args            rules 4, 5
	Btype           rule  6
	Xtype           rules 7, 8
	Ttype1          rules 9, 10
	Ttype           rule  11
	Ptype           rules 12, 13
	Ftype           rule  14
	Type            rules 15, 16
	Signature       rule  17
	Equation        rule  18
	Equations       rules 19, 20
	Stmts           rules 21, 22
	Stmt            rules 23, 24, 25, 26
	Expr            rules 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	List           goto state 6
	Expr           goto state 2

State 1


	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	Expr           goto state 2

State 2

	List -> Expr . comma ListHelper                     (rule 1)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           shift, and enter state 10
	minus          shift, and enter state 11
	times          shift, and enter state 12
	div            shift, and enter state 13
	comma          shift, and enter state 14
	eq             shift, and enter state 15
	gt             shift, and enter state 16
	lt             shift, and enter state 17
	lte            shift, and enter state 18
	gte            shift, and enter state 19


State 3

	Expr -> int .                                       (rule 27)

	plus           reduce using rule 27
	minus          reduce using rule 27
	times          reduce using rule 27
	div            reduce using rule 27
	rparen         reduce using rule 27
	comma          reduce using rule 27
	eq             reduce using rule 27
	gt             reduce using rule 27
	lt             reduce using rule 27
	lte            reduce using rule 27
	gte            reduce using rule 27
	%eof           reduce using rule 27


State 4

	Expr -> lparen . Expr rparen                        (rule 29)
	Expr -> lparen . List rparen                        (rule 30)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	List           goto state 8
	Expr           goto state 9

State 5

	Expr -> symbol .                                    (rule 28)
	Expr -> symbol . lparen Args rparen                 (rule 31)

	plus           reduce using rule 28
	minus          reduce using rule 28
	times          reduce using rule 28
	div            reduce using rule 28
	lparen         shift, and enter state 7
	rparen         reduce using rule 28
	comma          reduce using rule 28
	eq             reduce using rule 28
	gt             reduce using rule 28
	lt             reduce using rule 28
	lte            reduce using rule 28
	gte            reduce using rule 28
	%eof           reduce using rule 28


State 6

	%start_parseCalc -> List .                          (rule 0)

	%eof           accept


State 7

	Expr -> symbol lparen . Args rparen                 (rule 31)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	Args           goto state 33
	Expr           goto state 34

State 8

	Expr -> lparen List . rparen                        (rule 30)

	rparen         shift, and enter state 32


State 9

	List -> Expr . comma ListHelper                     (rule 1)
	Expr -> lparen Expr . rparen                        (rule 29)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           shift, and enter state 10
	minus          shift, and enter state 11
	times          shift, and enter state 12
	div            shift, and enter state 13
	rparen         shift, and enter state 31
	comma          shift, and enter state 14
	eq             shift, and enter state 15
	gt             shift, and enter state 16
	lt             shift, and enter state 17
	lte            shift, and enter state 18
	gte            shift, and enter state 19


State 10

	Expr -> Expr plus . Expr                            (rule 32)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	Expr           goto state 30

State 11

	Expr -> Expr minus . Expr                           (rule 33)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	Expr           goto state 29

State 12

	Expr -> Expr times . Expr                           (rule 34)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	Expr           goto state 28

State 13

	Expr -> Expr div . Expr                             (rule 35)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	Expr           goto state 27

State 14

	List -> Expr comma . ListHelper                     (rule 1)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	ListHelper     goto state 25
	Expr           goto state 26

State 15

	Expr -> Expr eq . Expr                              (rule 36)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	Expr           goto state 24

State 16

	Expr -> Expr gt . Expr                              (rule 37)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	Expr           goto state 23

State 17

	Expr -> Expr lt . Expr                              (rule 38)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	Expr           goto state 22

State 18

	Expr -> Expr lte . Expr                             (rule 39)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	Expr           goto state 21

State 19

	Expr -> Expr gte . Expr                             (rule 40)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	Expr           goto state 20

State 20

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)
	Expr -> Expr gte Expr .                             (rule 40)

	plus           shift, and enter state 10
	minus          shift, and enter state 11
	times          shift, and enter state 12
	div            shift, and enter state 13
	rparen         reduce using rule 40
	comma          reduce using rule 40
	eq             reduce using rule 40
	gt             reduce using rule 40
	lt             reduce using rule 40
	lte            reduce using rule 40
	gte            reduce using rule 40
	%eof           reduce using rule 40


State 21

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr lte Expr .                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           shift, and enter state 10
	minus          shift, and enter state 11
	times          shift, and enter state 12
	div            shift, and enter state 13
	rparen         reduce using rule 39
	comma          reduce using rule 39
	eq             reduce using rule 39
	gt             reduce using rule 39
	lt             reduce using rule 39
	lte            reduce using rule 39
	gte            reduce using rule 39
	%eof           reduce using rule 39


State 22

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr lt Expr .                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           shift, and enter state 10
	minus          shift, and enter state 11
	times          shift, and enter state 12
	div            shift, and enter state 13
	rparen         reduce using rule 38
	comma          reduce using rule 38
	eq             reduce using rule 38
	gt             reduce using rule 38
	lt             reduce using rule 38
	lte            reduce using rule 38
	gte            reduce using rule 38
	%eof           reduce using rule 38


State 23

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr gt Expr .                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           shift, and enter state 10
	minus          shift, and enter state 11
	times          shift, and enter state 12
	div            shift, and enter state 13
	rparen         reduce using rule 37
	comma          reduce using rule 37
	eq             reduce using rule 37
	gt             reduce using rule 37
	lt             reduce using rule 37
	lte            reduce using rule 37
	gte            reduce using rule 37
	%eof           reduce using rule 37


State 24

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr eq Expr .                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           shift, and enter state 10
	minus          shift, and enter state 11
	times          shift, and enter state 12
	div            shift, and enter state 13
	rparen         reduce using rule 36
	comma          reduce using rule 36
	eq             reduce using rule 36
	gt             reduce using rule 36
	lt             reduce using rule 36
	lte            reduce using rule 36
	gte            reduce using rule 36
	%eof           reduce using rule 36


State 25

	List -> Expr comma ListHelper .                     (rule 1)

	rparen         reduce using rule 1
	%eof           reduce using rule 1


State 26

	ListHelper -> Expr . comma ListHelper               (rule 2)
	ListHelper -> Expr .                                (rule 3)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           shift, and enter state 10
	minus          shift, and enter state 11
	times          shift, and enter state 12
	div            shift, and enter state 13
	rparen         reduce using rule 3
	comma          shift, and enter state 37
	eq             shift, and enter state 15
	gt             shift, and enter state 16
	lt             shift, and enter state 17
	lte            shift, and enter state 18
	gte            shift, and enter state 19
	%eof           reduce using rule 3


State 27

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr div Expr .                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           reduce using rule 35
	minus          reduce using rule 35
	times          reduce using rule 35
	div            reduce using rule 35
	rparen         reduce using rule 35
	comma          reduce using rule 35
	eq             reduce using rule 35
	gt             reduce using rule 35
	lt             reduce using rule 35
	lte            reduce using rule 35
	gte            reduce using rule 35
	%eof           reduce using rule 35


State 28

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr times Expr .                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           reduce using rule 34
	minus          reduce using rule 34
	times          reduce using rule 34
	div            reduce using rule 34
	rparen         reduce using rule 34
	comma          reduce using rule 34
	eq             reduce using rule 34
	gt             reduce using rule 34
	lt             reduce using rule 34
	lte            reduce using rule 34
	gte            reduce using rule 34
	%eof           reduce using rule 34


State 29

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr minus Expr .                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           reduce using rule 33
	minus          reduce using rule 33
	times          shift, and enter state 12
	div            shift, and enter state 13
	rparen         reduce using rule 33
	comma          reduce using rule 33
	eq             reduce using rule 33
	gt             reduce using rule 33
	lt             reduce using rule 33
	lte            reduce using rule 33
	gte            reduce using rule 33
	%eof           reduce using rule 33


State 30

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr plus Expr .                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           reduce using rule 32
	minus          reduce using rule 32
	times          shift, and enter state 12
	div            shift, and enter state 13
	rparen         reduce using rule 32
	comma          reduce using rule 32
	eq             reduce using rule 32
	gt             reduce using rule 32
	lt             reduce using rule 32
	lte            reduce using rule 32
	gte            reduce using rule 32
	%eof           reduce using rule 32


State 31

	Expr -> lparen Expr rparen .                        (rule 29)

	plus           reduce using rule 29
	minus          reduce using rule 29
	times          reduce using rule 29
	div            reduce using rule 29
	rparen         reduce using rule 29
	comma          reduce using rule 29
	eq             reduce using rule 29
	gt             reduce using rule 29
	lt             reduce using rule 29
	lte            reduce using rule 29
	gte            reduce using rule 29
	%eof           reduce using rule 29


State 32

	Expr -> lparen List rparen .                        (rule 30)

	plus           reduce using rule 30
	minus          reduce using rule 30
	times          reduce using rule 30
	div            reduce using rule 30
	rparen         reduce using rule 30
	comma          reduce using rule 30
	eq             reduce using rule 30
	gt             reduce using rule 30
	lt             reduce using rule 30
	lte            reduce using rule 30
	gte            reduce using rule 30
	%eof           reduce using rule 30


State 33

	Expr -> symbol lparen Args . rparen                 (rule 31)

	rparen         shift, and enter state 36


State 34

	Args -> Expr . comma Args                           (rule 4)
	Args -> Expr .                                      (rule 5)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           shift, and enter state 10
	minus          shift, and enter state 11
	times          shift, and enter state 12
	div            shift, and enter state 13
	rparen         reduce using rule 5
	comma          shift, and enter state 35
	eq             shift, and enter state 15
	gt             shift, and enter state 16
	lt             shift, and enter state 17
	lte            shift, and enter state 18
	gte            shift, and enter state 19


State 35

	Args -> Expr comma . Args                           (rule 4)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	Args           goto state 39
	Expr           goto state 34

State 36

	Expr -> symbol lparen Args rparen .                 (rule 31)

	plus           reduce using rule 31
	minus          reduce using rule 31
	times          reduce using rule 31
	div            reduce using rule 31
	rparen         reduce using rule 31
	comma          reduce using rule 31
	eq             reduce using rule 31
	gt             reduce using rule 31
	lt             reduce using rule 31
	lte            reduce using rule 31
	gte            reduce using rule 31
	%eof           reduce using rule 31


State 37

	ListHelper -> Expr comma . ListHelper               (rule 2)

	int            shift, and enter state 3
	lparen         shift, and enter state 4
	symbol         shift, and enter state 5

	ListHelper     goto state 38
	Expr           goto state 26

State 38

	ListHelper -> Expr comma ListHelper .               (rule 2)

	rparen         reduce using rule 2
	%eof           reduce using rule 2


State 39

	Args -> Expr comma Args .                           (rule 4)

	rparen         reduce using rule 4


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 41
Number of terminals: 24
Number of non-terminals: 17
Number of states: 40
