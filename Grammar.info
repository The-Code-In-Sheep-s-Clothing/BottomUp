-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from Grammar.y
-----------------------------------------------------------------------------

state 10 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Stmts                          (0)
	Stmts -> Stmt Stmts                                (1)
	Stmts ->                                           (2)
	List -> Variable comma ListHelper                  (3)
	ListHelper -> Variable comma ListHelper            (4)
	ListHelper -> Variable                             (5)
	Args -> Variable comma Args                        (6)
	Args -> Variable                                   (7)
	Btype -> symbol                                    (8)
	Xtype -> Btype pipe Xtype                          (9)
	Xtype -> Btype                                     (10)
	Ttype1 -> Xtype comma Ttype1                       (11)
	Ttype1 -> Xtype comma Xtype                        (12)
	Ttype -> lparen Ttype1 rparen                      (13)
	Ptype -> Ttype                                     (14)
	Ptype -> Xtype                                     (15)
	Ftype -> Ptype arrow Ptype                         (16)
	Type -> Ptype                                      (17)
	Type -> Ftype                                      (18)
	Signature -> symbol colon Type                     (19)
	Equation -> symbol lparen Args rparen eq WeakStmt   (20)
	Equations -> Equation Equations                    (21)
	Equations -> Equation                              (22)
	Stmt -> Signature Equations                        (23)
	Stmt -> type symbol assign Expr                    (24)
	WeakStmt -> if Expr then Expr else Expr            (25)
	WeakStmt -> while Expr do Expr                     (26)
	WeakStmt -> Expr                                   (27)
	Expr -> Variable                                   (28)
	Expr -> lparen Expr rparen                         (29)
	Expr -> lparen List rparen                         (30)
	Expr -> Expr plus Expr                             (31)
	Expr -> Expr minus Expr                            (32)
	Expr -> Expr times Expr                            (33)
	Expr -> Expr div Expr                              (34)
	Expr -> Expr eq Expr                               (35)
	Expr -> Expr gt Expr                               (36)
	Expr -> Expr lt Expr                               (37)
	Expr -> Expr lte Expr                              (38)
	Expr -> Expr gte Expr                              (39)
	Variable -> int                                    (40)
	Variable -> symbol                                 (41)
	Variable -> symbol lparen Args rparen              (42)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	type           { TokenType }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	while          { TokenWhile }
	do             { TokenDo }
	int            { TokenInt $$ }
	assign         { TokenAssign }
	plus           { TokenPlus }
	minus          { TokenMinus }
	times          { TokenTimes }
	div            { TokenDiv }
	lparen         { TokenLParen }
	rparen         { TokenRParen }
	pipe           { TokenPipe }
	colon          { TokenColon }
	arrow          { TokenArrow }
	comma          { TokenComa }
	eq             { TokenEQ }
	gt             { TokenGT }
	lt             { TokenLT }
	lte            { TokenLTE }
	gte            { TokenGTE }
	symbol         { TokenSym $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Stmts           rules 1, 2
	List            rule  3
	ListHelper      rules 4, 5
	Args            rules 6, 7
	Btype           rule  8
	Xtype           rules 9, 10
	Ttype1          rules 11, 12
	Ttype           rule  13
	Ptype           rules 14, 15
	Ftype           rule  16
	Type            rules 17, 18
	Signature       rule  19
	Equation        rule  20
	Equations       rules 21, 22
	Stmt            rules 23, 24
	WeakStmt        rules 25, 26, 27
	Expr            rules 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39
	Variable        rules 40, 41, 42

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	type           shift, and enter state 4
	symbol         shift, and enter state 5
	%eof           reduce using rule 2

	Stmts          goto state 6
	Signature      goto state 2
	Stmt           goto state 3

State 1


	type           shift, and enter state 4
	symbol         shift, and enter state 5

	Signature      goto state 2
	Stmt           goto state 3

State 2

	Stmt -> Signature . Equations                       (rule 23)

	symbol         shift, and enter state 12

	Equation       goto state 10
	Equations      goto state 11

State 3

	Stmts -> Stmt . Stmts                               (rule 1)

	type           shift, and enter state 4
	symbol         shift, and enter state 5
	%eof           reduce using rule 2

	Stmts          goto state 9
	Signature      goto state 2
	Stmt           goto state 3

State 4

	Stmt -> type . symbol assign Expr                   (rule 24)

	symbol         shift, and enter state 8


State 5

	Signature -> symbol . colon Type                    (rule 19)

	colon          shift, and enter state 7


State 6

	%start_parseCalc -> Stmts .                         (rule 0)

	%eof           accept


State 7

	Signature -> symbol colon . Type                    (rule 19)

	lparen         shift, and enter state 22
	symbol         shift, and enter state 23

	Btype          goto state 16
	Xtype          goto state 17
	Ttype          goto state 18
	Ptype          goto state 19
	Ftype          goto state 20
	Type           goto state 21

State 8

	Stmt -> type symbol . assign Expr                   (rule 24)

	assign         shift, and enter state 15


State 9

	Stmts -> Stmt Stmts .                               (rule 1)

	%eof           reduce using rule 1


State 10

	Equations -> Equation . Equations                   (rule 21)
	Equations -> Equation .                             (rule 22)

	type           reduce using rule 22
	symbol         shift, and enter state 12
			(reduce using rule 22)

	%eof           reduce using rule 22

	Equation       goto state 10
	Equations      goto state 14

State 11

	Stmt -> Signature Equations .                       (rule 23)

	type           reduce using rule 23
	symbol         reduce using rule 23
	%eof           reduce using rule 23


State 12

	Equation -> symbol . lparen Args rparen eq WeakStmt    (rule 20)

	lparen         shift, and enter state 13


State 13

	Equation -> symbol lparen . Args rparen eq WeakStmt    (rule 20)

	int            shift, and enter state 30
	symbol         shift, and enter state 32

	Args           goto state 33
	Variable       goto state 34

State 14

	Equations -> Equation Equations .                   (rule 21)

	type           reduce using rule 21
	symbol         reduce using rule 21
	%eof           reduce using rule 21


State 15

	Stmt -> type symbol assign . Expr                   (rule 24)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 28
	Variable       goto state 29

State 16

	Xtype -> Btype . pipe Xtype                         (rule 9)
	Xtype -> Btype .                                    (rule 10)

	rparen         reduce using rule 10
	pipe           shift, and enter state 27
	arrow          reduce using rule 10
	comma          reduce using rule 10
	symbol         reduce using rule 10


State 17

	Ptype -> Xtype .                                    (rule 15)

	arrow          reduce using rule 15
	symbol         reduce using rule 15


State 18

	Ptype -> Ttype .                                    (rule 14)

	arrow          reduce using rule 14
	symbol         reduce using rule 14


State 19

	Ftype -> Ptype . arrow Ptype                        (rule 16)
	Type -> Ptype .                                     (rule 17)

	arrow          shift, and enter state 26
	symbol         reduce using rule 17


State 20

	Type -> Ftype .                                     (rule 18)

	symbol         reduce using rule 18


State 21

	Signature -> symbol colon Type .                    (rule 19)

	symbol         reduce using rule 19


State 22

	Ttype -> lparen . Ttype1 rparen                     (rule 13)

	symbol         shift, and enter state 23

	Btype          goto state 16
	Xtype          goto state 24
	Ttype1         goto state 25

State 23

	Btype -> symbol .                                   (rule 8)

	rparen         reduce using rule 8
	pipe           reduce using rule 8
	arrow          reduce using rule 8
	comma          reduce using rule 8
	symbol         reduce using rule 8


State 24

	Ttype1 -> Xtype . comma Ttype1                      (rule 11)
	Ttype1 -> Xtype . comma Xtype                       (rule 12)

	comma          shift, and enter state 53


State 25

	Ttype -> lparen Ttype1 . rparen                     (rule 13)

	rparen         shift, and enter state 52


State 26

	Ftype -> Ptype arrow . Ptype                        (rule 16)

	lparen         shift, and enter state 22
	symbol         shift, and enter state 23

	Btype          goto state 16
	Xtype          goto state 17
	Ttype          goto state 18
	Ptype          goto state 51

State 27

	Xtype -> Btype pipe . Xtype                         (rule 9)

	symbol         shift, and enter state 23

	Btype          goto state 16
	Xtype          goto state 50

State 28

	Stmt -> type symbol assign Expr .                   (rule 24)
	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	type           reduce using rule 24
	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	eq             shift, and enter state 45
	gt             shift, and enter state 46
	lt             shift, and enter state 47
	lte            shift, and enter state 48
	gte            shift, and enter state 49
	symbol         reduce using rule 24
	%eof           reduce using rule 24


State 29

	Expr -> Variable .                                  (rule 28)

	type           reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	do             reduce using rule 28
	plus           reduce using rule 28
	minus          reduce using rule 28
	times          reduce using rule 28
	div            reduce using rule 28
	rparen         reduce using rule 28
	eq             reduce using rule 28
	gt             reduce using rule 28
	lt             reduce using rule 28
	lte            reduce using rule 28
	gte            reduce using rule 28
	symbol         reduce using rule 28
	%eof           reduce using rule 28


State 30

	Variable -> int .                                   (rule 40)

	type           reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	do             reduce using rule 40
	plus           reduce using rule 40
	minus          reduce using rule 40
	times          reduce using rule 40
	div            reduce using rule 40
	rparen         reduce using rule 40
	comma          reduce using rule 40
	eq             reduce using rule 40
	gt             reduce using rule 40
	lt             reduce using rule 40
	lte            reduce using rule 40
	gte            reduce using rule 40
	symbol         reduce using rule 40
	%eof           reduce using rule 40


State 31

	Expr -> lparen . Expr rparen                        (rule 29)
	Expr -> lparen . List rparen                        (rule 30)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	List           goto state 38
	Expr           goto state 39
	Variable       goto state 40

State 32

	Variable -> symbol .                                (rule 41)
	Variable -> symbol . lparen Args rparen             (rule 42)

	type           reduce using rule 41
	then           reduce using rule 41
	else           reduce using rule 41
	do             reduce using rule 41
	plus           reduce using rule 41
	minus          reduce using rule 41
	times          reduce using rule 41
	div            reduce using rule 41
	lparen         shift, and enter state 37
	rparen         reduce using rule 41
	comma          reduce using rule 41
	eq             reduce using rule 41
	gt             reduce using rule 41
	lt             reduce using rule 41
	lte            reduce using rule 41
	gte            reduce using rule 41
	symbol         reduce using rule 41
	%eof           reduce using rule 41


State 33

	Equation -> symbol lparen Args . rparen eq WeakStmt    (rule 20)

	rparen         shift, and enter state 36


State 34

	Args -> Variable . comma Args                       (rule 6)
	Args -> Variable .                                  (rule 7)

	rparen         reduce using rule 7
	comma          shift, and enter state 35


State 35

	Args -> Variable comma . Args                       (rule 6)

	int            shift, and enter state 30
	symbol         shift, and enter state 32

	Args           goto state 70
	Variable       goto state 34

State 36

	Equation -> symbol lparen Args rparen . eq WeakStmt    (rule 20)

	eq             shift, and enter state 69


State 37

	Variable -> symbol lparen . Args rparen             (rule 42)

	int            shift, and enter state 30
	symbol         shift, and enter state 32

	Args           goto state 68
	Variable       goto state 34

State 38

	Expr -> lparen List . rparen                        (rule 30)

	rparen         shift, and enter state 67


State 39

	Expr -> lparen Expr . rparen                        (rule 29)
	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	rparen         shift, and enter state 66
	eq             shift, and enter state 45
	gt             shift, and enter state 46
	lt             shift, and enter state 47
	lte            shift, and enter state 48
	gte            shift, and enter state 49


State 40

	List -> Variable . comma ListHelper                 (rule 3)
	Expr -> Variable .                                  (rule 28)

	plus           reduce using rule 28
	minus          reduce using rule 28
	times          reduce using rule 28
	div            reduce using rule 28
	rparen         reduce using rule 28
	comma          shift, and enter state 65
	eq             reduce using rule 28
	gt             reduce using rule 28
	lt             reduce using rule 28
	lte            reduce using rule 28
	gte            reduce using rule 28


State 41

	Expr -> Expr plus . Expr                            (rule 31)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 64
	Variable       goto state 29

State 42

	Expr -> Expr minus . Expr                           (rule 32)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 63
	Variable       goto state 29

State 43

	Expr -> Expr times . Expr                           (rule 33)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 62
	Variable       goto state 29

State 44

	Expr -> Expr div . Expr                             (rule 34)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 61
	Variable       goto state 29

State 45

	Expr -> Expr eq . Expr                              (rule 35)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 60
	Variable       goto state 29

State 46

	Expr -> Expr gt . Expr                              (rule 36)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 59
	Variable       goto state 29

State 47

	Expr -> Expr lt . Expr                              (rule 37)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 58
	Variable       goto state 29

State 48

	Expr -> Expr lte . Expr                             (rule 38)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 57
	Variable       goto state 29

State 49

	Expr -> Expr gte . Expr                             (rule 39)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 56
	Variable       goto state 29

State 50

	Xtype -> Btype pipe Xtype .                         (rule 9)

	rparen         reduce using rule 9
	arrow          reduce using rule 9
	comma          reduce using rule 9
	symbol         reduce using rule 9


State 51

	Ftype -> Ptype arrow Ptype .                        (rule 16)

	symbol         reduce using rule 16


State 52

	Ttype -> lparen Ttype1 rparen .                     (rule 13)

	arrow          reduce using rule 13
	symbol         reduce using rule 13


State 53

	Ttype1 -> Xtype comma . Ttype1                      (rule 11)
	Ttype1 -> Xtype comma . Xtype                       (rule 12)

	symbol         shift, and enter state 23

	Btype          goto state 16
	Xtype          goto state 54
	Ttype1         goto state 55

State 54

	Ttype1 -> Xtype . comma Ttype1                      (rule 11)
	Ttype1 -> Xtype . comma Xtype                       (rule 12)
	Ttype1 -> Xtype comma Xtype .                       (rule 12)

	rparen         reduce using rule 12
	comma          shift, and enter state 53


State 55

	Ttype1 -> Xtype comma Ttype1 .                      (rule 11)

	rparen         reduce using rule 11


State 56

	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)
	Expr -> Expr gte Expr .                             (rule 39)

	type           reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	do             reduce using rule 39
	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	rparen         reduce using rule 39
	eq             reduce using rule 39
	gt             reduce using rule 39
	lt             reduce using rule 39
	lte            reduce using rule 39
	gte            reduce using rule 39
	symbol         reduce using rule 39
	%eof           reduce using rule 39


State 57

	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr lte Expr .                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	type           reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	do             reduce using rule 38
	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	rparen         reduce using rule 38
	eq             reduce using rule 38
	gt             reduce using rule 38
	lt             reduce using rule 38
	lte            reduce using rule 38
	gte            reduce using rule 38
	symbol         reduce using rule 38
	%eof           reduce using rule 38


State 58

	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr lt Expr .                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	type           reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	do             reduce using rule 37
	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	rparen         reduce using rule 37
	eq             reduce using rule 37
	gt             reduce using rule 37
	lt             reduce using rule 37
	lte            reduce using rule 37
	gte            reduce using rule 37
	symbol         reduce using rule 37
	%eof           reduce using rule 37


State 59

	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr gt Expr .                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	type           reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	do             reduce using rule 36
	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	rparen         reduce using rule 36
	eq             reduce using rule 36
	gt             reduce using rule 36
	lt             reduce using rule 36
	lte            reduce using rule 36
	gte            reduce using rule 36
	symbol         reduce using rule 36
	%eof           reduce using rule 36


State 60

	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr eq Expr .                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	type           reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	do             reduce using rule 35
	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	rparen         reduce using rule 35
	eq             reduce using rule 35
	gt             reduce using rule 35
	lt             reduce using rule 35
	lte            reduce using rule 35
	gte            reduce using rule 35
	symbol         reduce using rule 35
	%eof           reduce using rule 35


State 61

	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr div Expr .                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	type           reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	do             reduce using rule 34
	plus           reduce using rule 34
	minus          reduce using rule 34
	times          reduce using rule 34
	div            reduce using rule 34
	rparen         reduce using rule 34
	eq             reduce using rule 34
	gt             reduce using rule 34
	lt             reduce using rule 34
	lte            reduce using rule 34
	gte            reduce using rule 34
	symbol         reduce using rule 34
	%eof           reduce using rule 34


State 62

	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr times Expr .                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	type           reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	do             reduce using rule 33
	plus           reduce using rule 33
	minus          reduce using rule 33
	times          reduce using rule 33
	div            reduce using rule 33
	rparen         reduce using rule 33
	eq             reduce using rule 33
	gt             reduce using rule 33
	lt             reduce using rule 33
	lte            reduce using rule 33
	gte            reduce using rule 33
	symbol         reduce using rule 33
	%eof           reduce using rule 33


State 63

	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr minus Expr .                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	type           reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	do             reduce using rule 32
	plus           reduce using rule 32
	minus          reduce using rule 32
	times          shift, and enter state 43
	div            shift, and enter state 44
	rparen         reduce using rule 32
	eq             reduce using rule 32
	gt             reduce using rule 32
	lt             reduce using rule 32
	lte            reduce using rule 32
	gte            reduce using rule 32
	symbol         reduce using rule 32
	%eof           reduce using rule 32


State 64

	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr plus Expr .                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	type           reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	do             reduce using rule 31
	plus           reduce using rule 31
	minus          reduce using rule 31
	times          shift, and enter state 43
	div            shift, and enter state 44
	rparen         reduce using rule 31
	eq             reduce using rule 31
	gt             reduce using rule 31
	lt             reduce using rule 31
	lte            reduce using rule 31
	gte            reduce using rule 31
	symbol         reduce using rule 31
	%eof           reduce using rule 31


State 65

	List -> Variable comma . ListHelper                 (rule 3)

	int            shift, and enter state 30
	symbol         shift, and enter state 32

	ListHelper     goto state 76
	Variable       goto state 77

State 66

	Expr -> lparen Expr rparen .                        (rule 29)

	type           reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	do             reduce using rule 29
	plus           reduce using rule 29
	minus          reduce using rule 29
	times          reduce using rule 29
	div            reduce using rule 29
	rparen         reduce using rule 29
	eq             reduce using rule 29
	gt             reduce using rule 29
	lt             reduce using rule 29
	lte            reduce using rule 29
	gte            reduce using rule 29
	symbol         reduce using rule 29
	%eof           reduce using rule 29


State 67

	Expr -> lparen List rparen .                        (rule 30)

	type           reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	do             reduce using rule 30
	plus           reduce using rule 30
	minus          reduce using rule 30
	times          reduce using rule 30
	div            reduce using rule 30
	rparen         reduce using rule 30
	eq             reduce using rule 30
	gt             reduce using rule 30
	lt             reduce using rule 30
	lte            reduce using rule 30
	gte            reduce using rule 30
	symbol         reduce using rule 30
	%eof           reduce using rule 30


State 68

	Variable -> symbol lparen Args . rparen             (rule 42)

	rparen         shift, and enter state 75


State 69

	Equation -> symbol lparen Args rparen eq . WeakStmt    (rule 20)

	if             shift, and enter state 73
	while          shift, and enter state 74
	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	WeakStmt       goto state 71
	Expr           goto state 72
	Variable       goto state 29

State 70

	Args -> Variable comma Args .                       (rule 6)

	rparen         reduce using rule 6


State 71

	Equation -> symbol lparen Args rparen eq WeakStmt .    (rule 20)

	type           reduce using rule 20
	symbol         reduce using rule 20
	%eof           reduce using rule 20


State 72

	WeakStmt -> Expr .                                  (rule 27)
	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	type           reduce using rule 27
	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	eq             shift, and enter state 45
	gt             shift, and enter state 46
	lt             shift, and enter state 47
	lte            shift, and enter state 48
	gte            shift, and enter state 49
	symbol         reduce using rule 27
	%eof           reduce using rule 27


State 73

	WeakStmt -> if . Expr then Expr else Expr           (rule 25)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 80
	Variable       goto state 29

State 74

	WeakStmt -> while . Expr do Expr                    (rule 26)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 79
	Variable       goto state 29

State 75

	Variable -> symbol lparen Args rparen .             (rule 42)

	type           reduce using rule 42
	then           reduce using rule 42
	else           reduce using rule 42
	do             reduce using rule 42
	plus           reduce using rule 42
	minus          reduce using rule 42
	times          reduce using rule 42
	div            reduce using rule 42
	rparen         reduce using rule 42
	comma          reduce using rule 42
	eq             reduce using rule 42
	gt             reduce using rule 42
	lt             reduce using rule 42
	lte            reduce using rule 42
	gte            reduce using rule 42
	symbol         reduce using rule 42
	%eof           reduce using rule 42


State 76

	List -> Variable comma ListHelper .                 (rule 3)

	rparen         reduce using rule 3


State 77

	ListHelper -> Variable . comma ListHelper           (rule 4)
	ListHelper -> Variable .                            (rule 5)

	rparen         reduce using rule 5
	comma          shift, and enter state 78


State 78

	ListHelper -> Variable comma . ListHelper           (rule 4)

	int            shift, and enter state 30
	symbol         shift, and enter state 32

	ListHelper     goto state 83
	Variable       goto state 77

State 79

	WeakStmt -> while Expr . do Expr                    (rule 26)
	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	do             shift, and enter state 82
	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	eq             shift, and enter state 45
	gt             shift, and enter state 46
	lt             shift, and enter state 47
	lte            shift, and enter state 48
	gte            shift, and enter state 49


State 80

	WeakStmt -> if Expr . then Expr else Expr           (rule 25)
	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	then           shift, and enter state 81
	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	eq             shift, and enter state 45
	gt             shift, and enter state 46
	lt             shift, and enter state 47
	lte            shift, and enter state 48
	gte            shift, and enter state 49


State 81

	WeakStmt -> if Expr then . Expr else Expr           (rule 25)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 85
	Variable       goto state 29

State 82

	WeakStmt -> while Expr do . Expr                    (rule 26)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 84
	Variable       goto state 29

State 83

	ListHelper -> Variable comma ListHelper .           (rule 4)

	rparen         reduce using rule 4


State 84

	WeakStmt -> while Expr do Expr .                    (rule 26)
	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	type           reduce using rule 26
	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	eq             shift, and enter state 45
	gt             shift, and enter state 46
	lt             shift, and enter state 47
	lte            shift, and enter state 48
	gte            shift, and enter state 49
	symbol         reduce using rule 26
	%eof           reduce using rule 26


State 85

	WeakStmt -> if Expr then Expr . else Expr           (rule 25)
	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	else           shift, and enter state 86
	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	eq             shift, and enter state 45
	gt             shift, and enter state 46
	lt             shift, and enter state 47
	lte            shift, and enter state 48
	gte            shift, and enter state 49


State 86

	WeakStmt -> if Expr then Expr else . Expr           (rule 25)

	int            shift, and enter state 30
	lparen         shift, and enter state 31
	symbol         shift, and enter state 32

	Expr           goto state 87
	Variable       goto state 29

State 87

	WeakStmt -> if Expr then Expr else Expr .           (rule 25)
	Expr -> Expr . plus Expr                            (rule 31)
	Expr -> Expr . minus Expr                           (rule 32)
	Expr -> Expr . times Expr                           (rule 33)
	Expr -> Expr . div Expr                             (rule 34)
	Expr -> Expr . eq Expr                              (rule 35)
	Expr -> Expr . gt Expr                              (rule 36)
	Expr -> Expr . lt Expr                              (rule 37)
	Expr -> Expr . lte Expr                             (rule 38)
	Expr -> Expr . gte Expr                             (rule 39)

	type           reduce using rule 25
	plus           shift, and enter state 41
	minus          shift, and enter state 42
	times          shift, and enter state 43
	div            shift, and enter state 44
	eq             shift, and enter state 45
	gt             shift, and enter state 46
	lt             shift, and enter state 47
	lte            shift, and enter state 48
	gte            shift, and enter state 49
	symbol         reduce using rule 25
	%eof           reduce using rule 25


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 43
Number of terminals: 24
Number of non-terminals: 19
Number of states: 88
