-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from Grammar.y
-----------------------------------------------------------------------------

state 17 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Stmts                          (0)
	Stmts -> Stmt Stmts                                (1)
	Stmts ->                                           (2)
	List -> Expr comma ListHelper                      (3)
	ListHelper -> Expr comma ListHelper                (4)
	ListHelper -> Expr                                 (5)
	Args -> Expr comma Args                            (6)
	Args -> Expr                                       (7)
	Btype -> symbol                                    (8)
	Xtype -> Btype pipe Xtype                          (9)
	Xtype -> Btype                                     (10)
	Ttype1 -> Xtype comma Ttype1                       (11)
	Ttype1 -> Xtype comma Xtype                        (12)
	Ttype -> lparen Ttype1 rparen                      (13)
	Ptype -> Ttype                                     (14)
	Ptype -> Xtype                                     (15)
	Ftype -> Ptype arrow Ptype                         (16)
	Type -> Ptype                                      (17)
	Type -> Ftype                                      (18)
	Signature -> symbol colon Type                     (19)
	Equation -> symbol lparen Args rparen eq Expr      (20)
	Equations -> Equation Equations                    (21)
	Equations -> Equation                              (22)
	Stmt -> if Expr then Expr else Expr                (23)
	Stmt -> while Expr do Expr                         (24)
	Stmt -> Signature Equations                        (25)
	Stmt -> type symbol assign Expr                    (26)
	Expr -> int                                        (27)
	Expr -> symbol                                     (28)
	Expr -> lparen Expr rparen                         (29)
	Expr -> lparen List rparen                         (30)
	Expr -> symbol lparen Args rparen                  (31)
	Expr -> Expr plus Expr                             (32)
	Expr -> Expr minus Expr                            (33)
	Expr -> Expr times Expr                            (34)
	Expr -> Expr div Expr                              (35)
	Expr -> Expr eq Expr                               (36)
	Expr -> Expr gt Expr                               (37)
	Expr -> Expr lt Expr                               (38)
	Expr -> Expr lte Expr                              (39)
	Expr -> Expr gte Expr                              (40)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	type           { TokenType }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	while          { TokenWhile }
	do             { TokenDo }
	int            { TokenInt $$ }
	assign         { TokenAssign }
	plus           { TokenPlus }
	minus          { TokenMinus }
	times          { TokenTimes }
	div            { TokenDiv }
	lparen         { TokenLParen }
	rparen         { TokenRParen }
	pipe           { TokenPipe }
	colon          { TokenColon }
	arrow          { TokenArrow }
	comma          { TokenComa }
	eq             { TokenEQ }
	gt             { TokenGT }
	lt             { TokenLT }
	lte            { TokenLTE }
	gte            { TokenGTE }
	symbol         { TokenSym $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Stmts           rules 1, 2
	List            rule  3
	ListHelper      rules 4, 5
	Args            rules 6, 7
	Btype           rule  8
	Xtype           rules 9, 10
	Ttype1          rules 11, 12
	Ttype           rule  13
	Ptype           rules 14, 15
	Ftype           rule  16
	Type            rules 17, 18
	Signature       rule  19
	Equation        rule  20
	Equations       rules 21, 22
	Stmt            rules 23, 24, 25, 26
	Expr            rules 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	type           shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	symbol         shift, and enter state 7
	%eof           reduce using rule 2

	Stmts          goto state 8
	Signature      goto state 2
	Stmt           goto state 3

State 1


	type           shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	symbol         shift, and enter state 7

	Signature      goto state 2
	Stmt           goto state 3

State 2

	Stmt -> Signature . Equations                       (rule 25)

	symbol         shift, and enter state 19

	Equation       goto state 17
	Equations      goto state 18

State 3

	Stmts -> Stmt . Stmts                               (rule 1)

	type           shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	symbol         shift, and enter state 7
	%eof           reduce using rule 2

	Stmts          goto state 16
	Signature      goto state 2
	Stmt           goto state 3

State 4

	Stmt -> type . symbol assign Expr                   (rule 26)

	symbol         shift, and enter state 15


State 5

	Stmt -> if . Expr then Expr else Expr               (rule 23)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 14

State 6

	Stmt -> while . Expr do Expr                        (rule 24)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 10

State 7

	Signature -> symbol . colon Type                    (rule 19)

	colon          shift, and enter state 9


State 8

	%start_parseCalc -> Stmts .                         (rule 0)

	%eof           accept


State 9

	Signature -> symbol colon . Type                    (rule 19)

	lparen         shift, and enter state 43
	symbol         shift, and enter state 44

	Btype          goto state 37
	Xtype          goto state 38
	Ttype          goto state 39
	Ptype          goto state 40
	Ftype          goto state 41
	Type           goto state 42

State 10

	Stmt -> while Expr . do Expr                        (rule 24)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	do             shift, and enter state 36
	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	eq             shift, and enter state 28
	gt             shift, and enter state 29
	lt             shift, and enter state 30
	lte            shift, and enter state 31
	gte            shift, and enter state 32


State 11

	Expr -> int .                                       (rule 27)

	type           reduce using rule 27
	if             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	while          reduce using rule 27
	do             reduce using rule 27
	plus           reduce using rule 27
	minus          reduce using rule 27
	times          reduce using rule 27
	div            reduce using rule 27
	rparen         reduce using rule 27
	comma          reduce using rule 27
	eq             reduce using rule 27
	gt             reduce using rule 27
	lt             reduce using rule 27
	lte            reduce using rule 27
	gte            reduce using rule 27
	symbol         reduce using rule 27
	%eof           reduce using rule 27


State 12

	Expr -> lparen . Expr rparen                        (rule 29)
	Expr -> lparen . List rparen                        (rule 30)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	List           goto state 34
	Expr           goto state 35

State 13

	Expr -> symbol .                                    (rule 28)
	Expr -> symbol . lparen Args rparen                 (rule 31)

	type           reduce using rule 28
	if             reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	while          reduce using rule 28
	do             reduce using rule 28
	plus           reduce using rule 28
	minus          reduce using rule 28
	times          reduce using rule 28
	div            reduce using rule 28
	lparen         shift, and enter state 33
	rparen         reduce using rule 28
	comma          reduce using rule 28
	eq             reduce using rule 28
	gt             reduce using rule 28
	lt             reduce using rule 28
	lte            reduce using rule 28
	gte            reduce using rule 28
	symbol         reduce using rule 28
	%eof           reduce using rule 28


State 14

	Stmt -> if Expr . then Expr else Expr               (rule 23)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	then           shift, and enter state 23
	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	eq             shift, and enter state 28
	gt             shift, and enter state 29
	lt             shift, and enter state 30
	lte            shift, and enter state 31
	gte            shift, and enter state 32


State 15

	Stmt -> type symbol . assign Expr                   (rule 26)

	assign         shift, and enter state 22


State 16

	Stmts -> Stmt Stmts .                               (rule 1)

	%eof           reduce using rule 1


State 17

	Equations -> Equation . Equations                   (rule 21)
	Equations -> Equation .                             (rule 22)

	type           reduce using rule 22
	if             reduce using rule 22
	while          reduce using rule 22
	symbol         shift, and enter state 19
			(reduce using rule 22)

	%eof           reduce using rule 22

	Equation       goto state 17
	Equations      goto state 21

State 18

	Stmt -> Signature Equations .                       (rule 25)

	type           reduce using rule 25
	if             reduce using rule 25
	while          reduce using rule 25
	symbol         reduce using rule 25
	%eof           reduce using rule 25


State 19

	Equation -> symbol . lparen Args rparen eq Expr     (rule 20)

	lparen         shift, and enter state 20


State 20

	Equation -> symbol lparen . Args rparen eq Expr     (rule 20)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Args           goto state 66
	Expr           goto state 54

State 21

	Equations -> Equation Equations .                   (rule 21)

	type           reduce using rule 21
	if             reduce using rule 21
	while          reduce using rule 21
	symbol         reduce using rule 21
	%eof           reduce using rule 21


State 22

	Stmt -> type symbol assign . Expr                   (rule 26)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 65

State 23

	Stmt -> if Expr then . Expr else Expr               (rule 23)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 64

State 24

	Expr -> Expr plus . Expr                            (rule 32)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 63

State 25

	Expr -> Expr minus . Expr                           (rule 33)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 62

State 26

	Expr -> Expr times . Expr                           (rule 34)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 61

State 27

	Expr -> Expr div . Expr                             (rule 35)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 60

State 28

	Expr -> Expr eq . Expr                              (rule 36)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 59

State 29

	Expr -> Expr gt . Expr                              (rule 37)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 58

State 30

	Expr -> Expr lt . Expr                              (rule 38)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 57

State 31

	Expr -> Expr lte . Expr                             (rule 39)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 56

State 32

	Expr -> Expr gte . Expr                             (rule 40)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 55

State 33

	Expr -> symbol lparen . Args rparen                 (rule 31)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Args           goto state 53
	Expr           goto state 54

State 34

	Expr -> lparen List . rparen                        (rule 30)

	rparen         shift, and enter state 52


State 35

	List -> Expr . comma ListHelper                     (rule 3)
	Expr -> lparen Expr . rparen                        (rule 29)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	rparen         shift, and enter state 50
	comma          shift, and enter state 51
	eq             shift, and enter state 28
	gt             shift, and enter state 29
	lt             shift, and enter state 30
	lte            shift, and enter state 31
	gte            shift, and enter state 32


State 36

	Stmt -> while Expr do . Expr                        (rule 24)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 49

State 37

	Xtype -> Btype . pipe Xtype                         (rule 9)
	Xtype -> Btype .                                    (rule 10)

	rparen         reduce using rule 10
	pipe           shift, and enter state 48
	arrow          reduce using rule 10
	comma          reduce using rule 10
	symbol         reduce using rule 10


State 38

	Ptype -> Xtype .                                    (rule 15)

	arrow          reduce using rule 15
	symbol         reduce using rule 15


State 39

	Ptype -> Ttype .                                    (rule 14)

	arrow          reduce using rule 14
	symbol         reduce using rule 14


State 40

	Ftype -> Ptype . arrow Ptype                        (rule 16)
	Type -> Ptype .                                     (rule 17)

	arrow          shift, and enter state 47
	symbol         reduce using rule 17


State 41

	Type -> Ftype .                                     (rule 18)

	symbol         reduce using rule 18


State 42

	Signature -> symbol colon Type .                    (rule 19)

	symbol         reduce using rule 19


State 43

	Ttype -> lparen . Ttype1 rparen                     (rule 13)

	symbol         shift, and enter state 44

	Btype          goto state 37
	Xtype          goto state 45
	Ttype1         goto state 46

State 44

	Btype -> symbol .                                   (rule 8)

	rparen         reduce using rule 8
	pipe           reduce using rule 8
	arrow          reduce using rule 8
	comma          reduce using rule 8
	symbol         reduce using rule 8


State 45

	Ttype1 -> Xtype . comma Ttype1                      (rule 11)
	Ttype1 -> Xtype . comma Xtype                       (rule 12)

	comma          shift, and enter state 76


State 46

	Ttype -> lparen Ttype1 . rparen                     (rule 13)

	rparen         shift, and enter state 75


State 47

	Ftype -> Ptype arrow . Ptype                        (rule 16)

	lparen         shift, and enter state 43
	symbol         shift, and enter state 44

	Btype          goto state 37
	Xtype          goto state 38
	Ttype          goto state 39
	Ptype          goto state 74

State 48

	Xtype -> Btype pipe . Xtype                         (rule 9)

	symbol         shift, and enter state 44

	Btype          goto state 37
	Xtype          goto state 73

State 49

	Stmt -> while Expr do Expr .                        (rule 24)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	type           reduce using rule 24
	if             reduce using rule 24
	while          reduce using rule 24
	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	eq             shift, and enter state 28
	gt             shift, and enter state 29
	lt             shift, and enter state 30
	lte            shift, and enter state 31
	gte            shift, and enter state 32
	symbol         reduce using rule 24
	%eof           reduce using rule 24


State 50

	Expr -> lparen Expr rparen .                        (rule 29)

	type           reduce using rule 29
	if             reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	while          reduce using rule 29
	do             reduce using rule 29
	plus           reduce using rule 29
	minus          reduce using rule 29
	times          reduce using rule 29
	div            reduce using rule 29
	rparen         reduce using rule 29
	comma          reduce using rule 29
	eq             reduce using rule 29
	gt             reduce using rule 29
	lt             reduce using rule 29
	lte            reduce using rule 29
	gte            reduce using rule 29
	symbol         reduce using rule 29
	%eof           reduce using rule 29


State 51

	List -> Expr comma . ListHelper                     (rule 3)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	ListHelper     goto state 71
	Expr           goto state 72

State 52

	Expr -> lparen List rparen .                        (rule 30)

	type           reduce using rule 30
	if             reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	while          reduce using rule 30
	do             reduce using rule 30
	plus           reduce using rule 30
	minus          reduce using rule 30
	times          reduce using rule 30
	div            reduce using rule 30
	rparen         reduce using rule 30
	comma          reduce using rule 30
	eq             reduce using rule 30
	gt             reduce using rule 30
	lt             reduce using rule 30
	lte            reduce using rule 30
	gte            reduce using rule 30
	symbol         reduce using rule 30
	%eof           reduce using rule 30


State 53

	Expr -> symbol lparen Args . rparen                 (rule 31)

	rparen         shift, and enter state 70


State 54

	Args -> Expr . comma Args                           (rule 6)
	Args -> Expr .                                      (rule 7)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	rparen         reduce using rule 7
	comma          shift, and enter state 69
	eq             shift, and enter state 28
	gt             shift, and enter state 29
	lt             shift, and enter state 30
	lte            shift, and enter state 31
	gte            shift, and enter state 32


State 55

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)
	Expr -> Expr gte Expr .                             (rule 40)

	type           reduce using rule 40
	if             reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	while          reduce using rule 40
	do             reduce using rule 40
	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	rparen         reduce using rule 40
	comma          reduce using rule 40
	eq             reduce using rule 40
	gt             reduce using rule 40
	lt             reduce using rule 40
	lte            reduce using rule 40
	gte            reduce using rule 40
	symbol         reduce using rule 40
	%eof           reduce using rule 40


State 56

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr lte Expr .                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	type           reduce using rule 39
	if             reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	while          reduce using rule 39
	do             reduce using rule 39
	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	rparen         reduce using rule 39
	comma          reduce using rule 39
	eq             reduce using rule 39
	gt             reduce using rule 39
	lt             reduce using rule 39
	lte            reduce using rule 39
	gte            reduce using rule 39
	symbol         reduce using rule 39
	%eof           reduce using rule 39


State 57

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr lt Expr .                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	type           reduce using rule 38
	if             reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	while          reduce using rule 38
	do             reduce using rule 38
	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	rparen         reduce using rule 38
	comma          reduce using rule 38
	eq             reduce using rule 38
	gt             reduce using rule 38
	lt             reduce using rule 38
	lte            reduce using rule 38
	gte            reduce using rule 38
	symbol         reduce using rule 38
	%eof           reduce using rule 38


State 58

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr gt Expr .                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	type           reduce using rule 37
	if             reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	while          reduce using rule 37
	do             reduce using rule 37
	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	rparen         reduce using rule 37
	comma          reduce using rule 37
	eq             reduce using rule 37
	gt             reduce using rule 37
	lt             reduce using rule 37
	lte            reduce using rule 37
	gte            reduce using rule 37
	symbol         reduce using rule 37
	%eof           reduce using rule 37


State 59

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr eq Expr .                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	type           reduce using rule 36
	if             reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	while          reduce using rule 36
	do             reduce using rule 36
	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	rparen         reduce using rule 36
	comma          reduce using rule 36
	eq             reduce using rule 36
	gt             reduce using rule 36
	lt             reduce using rule 36
	lte            reduce using rule 36
	gte            reduce using rule 36
	symbol         reduce using rule 36
	%eof           reduce using rule 36


State 60

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr div Expr .                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	type           reduce using rule 35
	if             reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	while          reduce using rule 35
	do             reduce using rule 35
	plus           reduce using rule 35
	minus          reduce using rule 35
	times          reduce using rule 35
	div            reduce using rule 35
	rparen         reduce using rule 35
	comma          reduce using rule 35
	eq             reduce using rule 35
	gt             reduce using rule 35
	lt             reduce using rule 35
	lte            reduce using rule 35
	gte            reduce using rule 35
	symbol         reduce using rule 35
	%eof           reduce using rule 35


State 61

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr times Expr .                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	type           reduce using rule 34
	if             reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	while          reduce using rule 34
	do             reduce using rule 34
	plus           reduce using rule 34
	minus          reduce using rule 34
	times          reduce using rule 34
	div            reduce using rule 34
	rparen         reduce using rule 34
	comma          reduce using rule 34
	eq             reduce using rule 34
	gt             reduce using rule 34
	lt             reduce using rule 34
	lte            reduce using rule 34
	gte            reduce using rule 34
	symbol         reduce using rule 34
	%eof           reduce using rule 34


State 62

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr minus Expr .                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	type           reduce using rule 33
	if             reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	while          reduce using rule 33
	do             reduce using rule 33
	plus           reduce using rule 33
	minus          reduce using rule 33
	times          shift, and enter state 26
	div            shift, and enter state 27
	rparen         reduce using rule 33
	comma          reduce using rule 33
	eq             reduce using rule 33
	gt             reduce using rule 33
	lt             reduce using rule 33
	lte            reduce using rule 33
	gte            reduce using rule 33
	symbol         reduce using rule 33
	%eof           reduce using rule 33


State 63

	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr plus Expr .                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	type           reduce using rule 32
	if             reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	while          reduce using rule 32
	do             reduce using rule 32
	plus           reduce using rule 32
	minus          reduce using rule 32
	times          shift, and enter state 26
	div            shift, and enter state 27
	rparen         reduce using rule 32
	comma          reduce using rule 32
	eq             reduce using rule 32
	gt             reduce using rule 32
	lt             reduce using rule 32
	lte            reduce using rule 32
	gte            reduce using rule 32
	symbol         reduce using rule 32
	%eof           reduce using rule 32


State 64

	Stmt -> if Expr then Expr . else Expr               (rule 23)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	else           shift, and enter state 68
	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	eq             shift, and enter state 28
	gt             shift, and enter state 29
	lt             shift, and enter state 30
	lte            shift, and enter state 31
	gte            shift, and enter state 32


State 65

	Stmt -> type symbol assign Expr .                   (rule 26)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	type           reduce using rule 26
	if             reduce using rule 26
	while          reduce using rule 26
	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	eq             shift, and enter state 28
	gt             shift, and enter state 29
	lt             shift, and enter state 30
	lte            shift, and enter state 31
	gte            shift, and enter state 32
	symbol         reduce using rule 26
	%eof           reduce using rule 26


State 66

	Equation -> symbol lparen Args . rparen eq Expr     (rule 20)

	rparen         shift, and enter state 67


State 67

	Equation -> symbol lparen Args rparen . eq Expr     (rule 20)

	eq             shift, and enter state 82


State 68

	Stmt -> if Expr then Expr else . Expr               (rule 23)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 81

State 69

	Args -> Expr comma . Args                           (rule 6)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Args           goto state 80
	Expr           goto state 54

State 70

	Expr -> symbol lparen Args rparen .                 (rule 31)

	type           reduce using rule 31
	if             reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	while          reduce using rule 31
	do             reduce using rule 31
	plus           reduce using rule 31
	minus          reduce using rule 31
	times          reduce using rule 31
	div            reduce using rule 31
	rparen         reduce using rule 31
	comma          reduce using rule 31
	eq             reduce using rule 31
	gt             reduce using rule 31
	lt             reduce using rule 31
	lte            reduce using rule 31
	gte            reduce using rule 31
	symbol         reduce using rule 31
	%eof           reduce using rule 31


State 71

	List -> Expr comma ListHelper .                     (rule 3)

	rparen         reduce using rule 3


State 72

	ListHelper -> Expr . comma ListHelper               (rule 4)
	ListHelper -> Expr .                                (rule 5)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	rparen         reduce using rule 5
	comma          shift, and enter state 79
	eq             shift, and enter state 28
	gt             shift, and enter state 29
	lt             shift, and enter state 30
	lte            shift, and enter state 31
	gte            shift, and enter state 32


State 73

	Xtype -> Btype pipe Xtype .                         (rule 9)

	rparen         reduce using rule 9
	arrow          reduce using rule 9
	comma          reduce using rule 9
	symbol         reduce using rule 9


State 74

	Ftype -> Ptype arrow Ptype .                        (rule 16)

	symbol         reduce using rule 16


State 75

	Ttype -> lparen Ttype1 rparen .                     (rule 13)

	arrow          reduce using rule 13
	symbol         reduce using rule 13


State 76

	Ttype1 -> Xtype comma . Ttype1                      (rule 11)
	Ttype1 -> Xtype comma . Xtype                       (rule 12)

	symbol         shift, and enter state 44

	Btype          goto state 37
	Xtype          goto state 77
	Ttype1         goto state 78

State 77

	Ttype1 -> Xtype . comma Ttype1                      (rule 11)
	Ttype1 -> Xtype . comma Xtype                       (rule 12)
	Ttype1 -> Xtype comma Xtype .                       (rule 12)

	rparen         reduce using rule 12
	comma          shift, and enter state 76


State 78

	Ttype1 -> Xtype comma Ttype1 .                      (rule 11)

	rparen         reduce using rule 11


State 79

	ListHelper -> Expr comma . ListHelper               (rule 4)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	ListHelper     goto state 84
	Expr           goto state 72

State 80

	Args -> Expr comma Args .                           (rule 6)

	rparen         reduce using rule 6


State 81

	Stmt -> if Expr then Expr else Expr .               (rule 23)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	type           reduce using rule 23
	if             reduce using rule 23
	while          reduce using rule 23
	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	eq             shift, and enter state 28
	gt             shift, and enter state 29
	lt             shift, and enter state 30
	lte            shift, and enter state 31
	gte            shift, and enter state 32
	symbol         reduce using rule 23
	%eof           reduce using rule 23


State 82

	Equation -> symbol lparen Args rparen eq . Expr     (rule 20)

	int            shift, and enter state 11
	lparen         shift, and enter state 12
	symbol         shift, and enter state 13

	Expr           goto state 83

State 83

	Equation -> symbol lparen Args rparen eq Expr .     (rule 20)
	Expr -> Expr . plus Expr                            (rule 32)
	Expr -> Expr . minus Expr                           (rule 33)
	Expr -> Expr . times Expr                           (rule 34)
	Expr -> Expr . div Expr                             (rule 35)
	Expr -> Expr . eq Expr                              (rule 36)
	Expr -> Expr . gt Expr                              (rule 37)
	Expr -> Expr . lt Expr                              (rule 38)
	Expr -> Expr . lte Expr                             (rule 39)
	Expr -> Expr . gte Expr                             (rule 40)

	type           reduce using rule 20
	if             reduce using rule 20
	while          reduce using rule 20
	plus           shift, and enter state 24
	minus          shift, and enter state 25
	times          shift, and enter state 26
	div            shift, and enter state 27
	eq             shift, and enter state 28
	gt             shift, and enter state 29
	lt             shift, and enter state 30
	lte            shift, and enter state 31
	gte            shift, and enter state 32
	symbol         reduce using rule 20
	%eof           reduce using rule 20


State 84

	ListHelper -> Expr comma ListHelper .               (rule 4)

	rparen         reduce using rule 4


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 41
Number of terminals: 24
Number of non-terminals: 17
Number of states: 85
