-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from Grammar.y
-----------------------------------------------------------------------------

state 27 contains 9 shift/reduce conflicts.
state 36 contains 9 shift/reduce conflicts.
state 42 contains 9 shift/reduce conflicts.

terminal type is unused
terminal assign is unused
terminal pipe is unused
terminal colon is unused
terminal arrow is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> List                           (0)
	List -> Expr comma ListHelper                      (1)
	ListHelper -> Expr comma ListHelper                (2)
	ListHelper -> Expr                                 (3)
	Args -> Expr comma Args                            (4)
	Args -> Expr                                       (5)
	Binop -> plus                                      (6)
	Binop -> minus                                     (7)
	Binop -> times                                     (8)
	Binop -> div                                       (9)
	Binop -> eq                                        (10)
	Binop -> gt                                        (11)
	Binop -> lt                                        (12)
	Binop -> lte                                       (13)
	Binop -> gte                                       (14)
	Expr -> int                                        (15)
	Expr -> symbol                                     (16)
	Expr -> lparen Expr rparen                         (17)
	Expr -> lparen List rparen                         (18)
	Expr -> symbol lparen Args rparen                  (19)
	Expr -> Expr Binop Expr                            (20)
	Expr -> if Expr then Expr else Expr                (21)
	Expr -> while Expr do Expr                         (22)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	type           { TokenType }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	while          { TokenWhile }
	do             { TokenDo }
	int            { TokenInt $$ }
	assign         { TokenAssign }
	plus           { TokenPlus }
	minus          { TokenMinus }
	times          { TokenTimes }
	div            { TokenDiv }
	lparen         { TokenLParen }
	rparen         { TokenRParen }
	pipe           { TokenPipe }
	colon          { TokenColon }
	arrow          { TokenArrow }
	comma          { TokenComa }
	eq             { TokenEQ }
	gt             { TokenGT }
	lt             { TokenLT }
	lte            { TokenLTE }
	gte            { TokenGTE }
	symbol         { TokenSym $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	List            rule  1
	ListHelper      rules 2, 3
	Args            rules 4, 5
	Binop           rules 6, 7, 8, 9, 10, 11, 12, 13, 14
	Expr            rules 15, 16, 17, 18, 19, 20, 21, 22

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	List           goto state 8
	Expr           goto state 2

State 1


	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	Expr           goto state 2

State 2

	List -> Expr . comma ListHelper                     (rule 1)
	Expr -> Expr . Binop Expr                           (rule 20)

	plus           shift, and enter state 15
	minus          shift, and enter state 16
	times          shift, and enter state 17
	div            shift, and enter state 18
	comma          shift, and enter state 19
	eq             shift, and enter state 20
	gt             shift, and enter state 21
	lt             shift, and enter state 22
	lte            shift, and enter state 23
	gte            shift, and enter state 24

	Binop          goto state 14

State 3

	Expr -> if . Expr then Expr else Expr               (rule 21)

	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	Expr           goto state 13

State 4

	Expr -> while . Expr do Expr                        (rule 22)

	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	Expr           goto state 12

State 5

	Expr -> int .                                       (rule 15)

	then           reduce using rule 15
	else           reduce using rule 15
	do             reduce using rule 15
	plus           reduce using rule 15
	minus          reduce using rule 15
	times          reduce using rule 15
	div            reduce using rule 15
	rparen         reduce using rule 15
	comma          reduce using rule 15
	eq             reduce using rule 15
	gt             reduce using rule 15
	lt             reduce using rule 15
	lte            reduce using rule 15
	gte            reduce using rule 15
	%eof           reduce using rule 15


State 6

	Expr -> lparen . Expr rparen                        (rule 17)
	Expr -> lparen . List rparen                        (rule 18)

	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	List           goto state 10
	Expr           goto state 11

State 7

	Expr -> symbol .                                    (rule 16)
	Expr -> symbol . lparen Args rparen                 (rule 19)

	then           reduce using rule 16
	else           reduce using rule 16
	do             reduce using rule 16
	plus           reduce using rule 16
	minus          reduce using rule 16
	times          reduce using rule 16
	div            reduce using rule 16
	lparen         shift, and enter state 9
	rparen         reduce using rule 16
	comma          reduce using rule 16
	eq             reduce using rule 16
	gt             reduce using rule 16
	lt             reduce using rule 16
	lte            reduce using rule 16
	gte            reduce using rule 16
	%eof           reduce using rule 16


State 8

	%start_parseCalc -> List .                          (rule 0)

	%eof           accept


State 9

	Expr -> symbol lparen . Args rparen                 (rule 19)

	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	Args           goto state 32
	Expr           goto state 33

State 10

	Expr -> lparen List . rparen                        (rule 18)

	rparen         shift, and enter state 31


State 11

	List -> Expr . comma ListHelper                     (rule 1)
	Expr -> lparen Expr . rparen                        (rule 17)
	Expr -> Expr . Binop Expr                           (rule 20)

	plus           shift, and enter state 15
	minus          shift, and enter state 16
	times          shift, and enter state 17
	div            shift, and enter state 18
	rparen         shift, and enter state 30
	comma          shift, and enter state 19
	eq             shift, and enter state 20
	gt             shift, and enter state 21
	lt             shift, and enter state 22
	lte            shift, and enter state 23
	gte            shift, and enter state 24

	Binop          goto state 14

State 12

	Expr -> Expr . Binop Expr                           (rule 20)
	Expr -> while Expr . do Expr                        (rule 22)

	do             shift, and enter state 29
	plus           shift, and enter state 15
	minus          shift, and enter state 16
	times          shift, and enter state 17
	div            shift, and enter state 18
	eq             shift, and enter state 20
	gt             shift, and enter state 21
	lt             shift, and enter state 22
	lte            shift, and enter state 23
	gte            shift, and enter state 24

	Binop          goto state 14

State 13

	Expr -> Expr . Binop Expr                           (rule 20)
	Expr -> if Expr . then Expr else Expr               (rule 21)

	then           shift, and enter state 28
	plus           shift, and enter state 15
	minus          shift, and enter state 16
	times          shift, and enter state 17
	div            shift, and enter state 18
	eq             shift, and enter state 20
	gt             shift, and enter state 21
	lt             shift, and enter state 22
	lte            shift, and enter state 23
	gte            shift, and enter state 24

	Binop          goto state 14

State 14

	Expr -> Expr Binop . Expr                           (rule 20)

	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	Expr           goto state 27

State 15

	Binop -> plus .                                     (rule 6)

	if             reduce using rule 6
	while          reduce using rule 6
	int            reduce using rule 6
	lparen         reduce using rule 6
	symbol         reduce using rule 6


State 16

	Binop -> minus .                                    (rule 7)

	if             reduce using rule 7
	while          reduce using rule 7
	int            reduce using rule 7
	lparen         reduce using rule 7
	symbol         reduce using rule 7


State 17

	Binop -> times .                                    (rule 8)

	if             reduce using rule 8
	while          reduce using rule 8
	int            reduce using rule 8
	lparen         reduce using rule 8
	symbol         reduce using rule 8


State 18

	Binop -> div .                                      (rule 9)

	if             reduce using rule 9
	while          reduce using rule 9
	int            reduce using rule 9
	lparen         reduce using rule 9
	symbol         reduce using rule 9


State 19

	List -> Expr comma . ListHelper                     (rule 1)

	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	ListHelper     goto state 25
	Expr           goto state 26

State 20

	Binop -> eq .                                       (rule 10)

	if             reduce using rule 10
	while          reduce using rule 10
	int            reduce using rule 10
	lparen         reduce using rule 10
	symbol         reduce using rule 10


State 21

	Binop -> gt .                                       (rule 11)

	if             reduce using rule 11
	while          reduce using rule 11
	int            reduce using rule 11
	lparen         reduce using rule 11
	symbol         reduce using rule 11


State 22

	Binop -> lt .                                       (rule 12)

	if             reduce using rule 12
	while          reduce using rule 12
	int            reduce using rule 12
	lparen         reduce using rule 12
	symbol         reduce using rule 12


State 23

	Binop -> lte .                                      (rule 13)

	if             reduce using rule 13
	while          reduce using rule 13
	int            reduce using rule 13
	lparen         reduce using rule 13
	symbol         reduce using rule 13


State 24

	Binop -> gte .                                      (rule 14)

	if             reduce using rule 14
	while          reduce using rule 14
	int            reduce using rule 14
	lparen         reduce using rule 14
	symbol         reduce using rule 14


State 25

	List -> Expr comma ListHelper .                     (rule 1)

	rparen         reduce using rule 1
	%eof           reduce using rule 1


State 26

	ListHelper -> Expr . comma ListHelper               (rule 2)
	ListHelper -> Expr .                                (rule 3)
	Expr -> Expr . Binop Expr                           (rule 20)

	plus           shift, and enter state 15
	minus          shift, and enter state 16
	times          shift, and enter state 17
	div            shift, and enter state 18
	rparen         reduce using rule 3
	comma          shift, and enter state 38
	eq             shift, and enter state 20
	gt             shift, and enter state 21
	lt             shift, and enter state 22
	lte            shift, and enter state 23
	gte            shift, and enter state 24
	%eof           reduce using rule 3

	Binop          goto state 14

State 27

	Expr -> Expr . Binop Expr                           (rule 20)
	Expr -> Expr Binop Expr .                           (rule 20)

	then           reduce using rule 20
	else           reduce using rule 20
	do             reduce using rule 20
	plus           shift, and enter state 15
			(reduce using rule 20)

	minus          shift, and enter state 16
			(reduce using rule 20)

	times          shift, and enter state 17
			(reduce using rule 20)

	div            shift, and enter state 18
			(reduce using rule 20)

	rparen         reduce using rule 20
	comma          reduce using rule 20
	eq             shift, and enter state 20
			(reduce using rule 20)

	gt             shift, and enter state 21
			(reduce using rule 20)

	lt             shift, and enter state 22
			(reduce using rule 20)

	lte            shift, and enter state 23
			(reduce using rule 20)

	gte            shift, and enter state 24
			(reduce using rule 20)

	%eof           reduce using rule 20

	Binop          goto state 14

State 28

	Expr -> if Expr then . Expr else Expr               (rule 21)

	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	Expr           goto state 37

State 29

	Expr -> while Expr do . Expr                        (rule 22)

	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	Expr           goto state 36

State 30

	Expr -> lparen Expr rparen .                        (rule 17)

	then           reduce using rule 17
	else           reduce using rule 17
	do             reduce using rule 17
	plus           reduce using rule 17
	minus          reduce using rule 17
	times          reduce using rule 17
	div            reduce using rule 17
	rparen         reduce using rule 17
	comma          reduce using rule 17
	eq             reduce using rule 17
	gt             reduce using rule 17
	lt             reduce using rule 17
	lte            reduce using rule 17
	gte            reduce using rule 17
	%eof           reduce using rule 17


State 31

	Expr -> lparen List rparen .                        (rule 18)

	then           reduce using rule 18
	else           reduce using rule 18
	do             reduce using rule 18
	plus           reduce using rule 18
	minus          reduce using rule 18
	times          reduce using rule 18
	div            reduce using rule 18
	rparen         reduce using rule 18
	comma          reduce using rule 18
	eq             reduce using rule 18
	gt             reduce using rule 18
	lt             reduce using rule 18
	lte            reduce using rule 18
	gte            reduce using rule 18
	%eof           reduce using rule 18


State 32

	Expr -> symbol lparen Args . rparen                 (rule 19)

	rparen         shift, and enter state 35


State 33

	Args -> Expr . comma Args                           (rule 4)
	Args -> Expr .                                      (rule 5)
	Expr -> Expr . Binop Expr                           (rule 20)

	plus           shift, and enter state 15
	minus          shift, and enter state 16
	times          shift, and enter state 17
	div            shift, and enter state 18
	rparen         reduce using rule 5
	comma          shift, and enter state 34
	eq             shift, and enter state 20
	gt             shift, and enter state 21
	lt             shift, and enter state 22
	lte            shift, and enter state 23
	gte            shift, and enter state 24

	Binop          goto state 14

State 34

	Args -> Expr comma . Args                           (rule 4)

	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	Args           goto state 41
	Expr           goto state 33

State 35

	Expr -> symbol lparen Args rparen .                 (rule 19)

	then           reduce using rule 19
	else           reduce using rule 19
	do             reduce using rule 19
	plus           reduce using rule 19
	minus          reduce using rule 19
	times          reduce using rule 19
	div            reduce using rule 19
	rparen         reduce using rule 19
	comma          reduce using rule 19
	eq             reduce using rule 19
	gt             reduce using rule 19
	lt             reduce using rule 19
	lte            reduce using rule 19
	gte            reduce using rule 19
	%eof           reduce using rule 19


State 36

	Expr -> Expr . Binop Expr                           (rule 20)
	Expr -> while Expr do Expr .                        (rule 22)

	then           reduce using rule 22
	else           reduce using rule 22
	do             reduce using rule 22
	plus           shift, and enter state 15
			(reduce using rule 22)

	minus          shift, and enter state 16
			(reduce using rule 22)

	times          shift, and enter state 17
			(reduce using rule 22)

	div            shift, and enter state 18
			(reduce using rule 22)

	rparen         reduce using rule 22
	comma          reduce using rule 22
	eq             shift, and enter state 20
			(reduce using rule 22)

	gt             shift, and enter state 21
			(reduce using rule 22)

	lt             shift, and enter state 22
			(reduce using rule 22)

	lte            shift, and enter state 23
			(reduce using rule 22)

	gte            shift, and enter state 24
			(reduce using rule 22)

	%eof           reduce using rule 22

	Binop          goto state 14

State 37

	Expr -> Expr . Binop Expr                           (rule 20)
	Expr -> if Expr then Expr . else Expr               (rule 21)

	else           shift, and enter state 40
	plus           shift, and enter state 15
	minus          shift, and enter state 16
	times          shift, and enter state 17
	div            shift, and enter state 18
	eq             shift, and enter state 20
	gt             shift, and enter state 21
	lt             shift, and enter state 22
	lte            shift, and enter state 23
	gte            shift, and enter state 24

	Binop          goto state 14

State 38

	ListHelper -> Expr comma . ListHelper               (rule 2)

	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	ListHelper     goto state 39
	Expr           goto state 26

State 39

	ListHelper -> Expr comma ListHelper .               (rule 2)

	rparen         reduce using rule 2
	%eof           reduce using rule 2


State 40

	Expr -> if Expr then Expr else . Expr               (rule 21)

	if             shift, and enter state 3
	while          shift, and enter state 4
	int            shift, and enter state 5
	lparen         shift, and enter state 6
	symbol         shift, and enter state 7

	Expr           goto state 42

State 41

	Args -> Expr comma Args .                           (rule 4)

	rparen         reduce using rule 4


State 42

	Expr -> Expr . Binop Expr                           (rule 20)
	Expr -> if Expr then Expr else Expr .               (rule 21)

	then           reduce using rule 21
	else           reduce using rule 21
	do             reduce using rule 21
	plus           shift, and enter state 15
			(reduce using rule 21)

	minus          shift, and enter state 16
			(reduce using rule 21)

	times          shift, and enter state 17
			(reduce using rule 21)

	div            shift, and enter state 18
			(reduce using rule 21)

	rparen         reduce using rule 21
	comma          reduce using rule 21
	eq             shift, and enter state 20
			(reduce using rule 21)

	gt             shift, and enter state 21
			(reduce using rule 21)

	lt             shift, and enter state 22
			(reduce using rule 21)

	lte            shift, and enter state 23
			(reduce using rule 21)

	gte            shift, and enter state 24
			(reduce using rule 21)

	%eof           reduce using rule 21

	Binop          goto state 14

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 23
Number of terminals: 24
Number of non-terminals: 6
Number of states: 43
