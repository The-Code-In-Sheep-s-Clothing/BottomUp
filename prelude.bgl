-- asdfasdf
type Player = {A,B}
type PState = (Board,Player)

-- Players
--
goFirst : Player
goFirst = A

next : Player -> Player
next(p) = if p == A then B else A


-- Initial board and board operations
--
initialBoard : Board
initialBoard ! (x, y) = Empty

isValid : (Board,Position) -> Bool
isValid(b,p) = if (b ! p) == Empty then True else False

isFull : Board -> Bool
isFull(b) = countBoard(Empty,b) == 0

tryMove : (Board, Player) -> (Board, Player)
tryMove(b,p) = let pos = input in
                   if isValid(b,pos) then (place(p,b,pos),next(p))
                                     else (b,p)

evenPiece : Board -> Bool
evenPiece(b) = isEven(countBoard(Empty,b))

isEven : Int -> Bool
isEven(a) = if a == 0 then True
               else if a == 1 then False
               else let b = a-2 in isEven(b)

-- Game state operations
--
